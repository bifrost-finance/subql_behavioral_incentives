type Account @entity {

  id: ID! #AccountId
}

type DemocracyVoting @entity {

  id: ID! #id is a required field

  account: Account! #Foreign key to Account Entity

  event: String! #Event name

  token: String! #Token symbol

  amount: BigInt! #Amount of BNC voted

  blockHeight: Int! #Block height of the Voted event

  timestamp: Date!  #Timestamp of the Voted event
}


type ParachainStaking @entity {

  id: ID! #id is a required field

  account: Account! #Foreign key to Account Entity

  event: String! #Event name

  token: String! #Token symbol

  amount: BigInt! #Amount of BNC voted

  blockHeight: Int! #Block height of the Voted event

  timestamp: Date!  #Timestamp of the Voted event
}

type SalpContribution @entity {

  id: ID! #id is a required field

  account: Account! #Foreign key to Account Entity

  event: String! #Event name

  token: String! #Token symbol

  amount: BigInt! #Amount of BNC voted

  blockHeight: Int! #Block height of the Voted event

  timestamp: Date!  #Timestamp of the Voted event
}

type SlpMinting @entity {

  id: ID! #id is a required field

  account: Account! #Foreign key to Account Entity

  event: String! #Event name

  token: String! #Token symbol

  amount: BigInt! #Amount of BNC voted

  blockHeight: Int! #Block height of the Voted event

  timestamp: Date!  #Timestamp of the Voted event
}


type VstokenConversion @entity {

  id: ID! #id is a required field

  account: Account! #Foreign key to Account Entity

  event: String! #Event name

  token: String! #Token symbol

  amount: BigInt! #Amount of BNC voted

  blockHeight: Int! #Block height of the Voted event

  timestamp: Date!  #Timestamp of the Voted event

  exchangeRate: Float!  #Token/Vtoken exchange rate ot the block height
}


type VtokenTransferOut @entity {

  id: ID! #id is a required field

  account: Account! #Foreign key to Account Entity

  event: String! #Event name

  token: String! #Token symbol

  amount: BigInt! #Amount of BNC voted

  blockHeight: Int! #Block height of the Voted event

  timestamp: Date!  #Timestamp of the Voted event

  exchangeRate: Float!  #Token/Vtoken exchange rate ot the block height
}


type ZenlinkLiquidity @entity {

  id: ID! #id is a required field

  account: Account! #Foreign key to Account Entity

  event: String! #Event name

  token: String! #Token symbol

  amount: BigInt! #Amount of BNC voted

  blockHeight: Int! #Block height of the Voted event

  timestamp: Date!  #Timestamp of the Voted event
}

type ZenlinkVtokenSwap @entity {

  id: ID! #id is a required field

  account: Account! #Foreign key to Account Entity

  event: String! #Event name

  token: String! #Token symbol

  amount: BigInt! #Amount of BNC voted

  blockHeight: Int! #Block height of the Voted event

  timestamp: Date!  #Timestamp of the Voted event

  exchangeRate: Float!  #Token/Vtoken exchange rate ot the block height
}

##############################################
# Above are the tables from event scratching #
# Below are the tables for campaigns support #
##############################################

type Token @entity {

  id: ID! #Token symbol

  precision: BigInt! #The precision of the token.
}

type RewardCoefficients @entity {

  id: ID! #id is a required field

  event: String! #Event name

  token: String! #Token symbol

  coefficient: Float!  #Reward coefficient
}

type CampaignInfo @entity {

  id: ID! #id is a required field

  start: Int! #Event name

  end: Int! #Token symbol

  totalRewards: BigInt!  #Total reward pool

  addPointsInterval: Int! #Only the highest point addition will be counted within this interval

  deductPointsInterval: Int!  #Only the highest point deduction will be counted within this interval
}

type StakingExtraRewards @entity {

  id: ID! #id is a required field

  bottom: Int! #Range bottom

  ceiling: Int! #Range ceiling

  coefficient: Float!  #Total reward pool
}